Содержимое файла App.tsx представлено следующим кодом:
import { Route, Routes, } from "react-router-dom";
import Navigation from "./components/Navigation";
import Settings from "./pages/Settings";
import Connect from "./pages/Connect";


function App() {
  return (
    <div className="h-full w-full">
      <Navigation />
      <div className="pt-12">
        <Routes>
          {/* <Route path="/" element={<Viewer />} /> */}
          <Route path="/settings" element={<Settings />} />
          <Route path="/" element={<Connect />} />
        </Routes>
      </div>
    </div>
  );
}

export default App;


Содержимое файла colors.css представлено следующим кодом:
:root {
  --background: #171d1c;
  --light-background: color(
    from var(--background) xyz calc(x * 2.1) calc(y * 2.1) calc(z * 2.1)
  );
  --text: #efe9f4;
  --secondary: rgb(16, 91, 51);
  --secondary: #5863f8;
  --secondary-dark: color(
    from var(--secondary) xyz calc(x * 0.21) calc(y * 0.21) calc(z * 0.21)
  );
  --secondary-hover-light: color(
    from var(--secondary) xyz calc(x * 0.8) calc(y * 0.8) calc(z * 0.8)
  );
  --secondary-hover: color(
    from var(--secondary) xyz calc(x * 0.45) calc(y * 0.45) calc(z * 0.45)
  );
  --warning: #f88b58;
  --warning-hover: color(
    from var(--warning) xyz calc(x * 0.45) calc(y * 0.45) calc(z * 0.45)
  );
  --good: rgb(59, 161, 59);
  --filler: #3f3f3f;
  --transparent: transparent;
}


Содержимое файла index.css представлено следующим кодом:
@import url("./colors.css");

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
}
body {
  background-color: var(--background);
  color: var(--text);
}
svg {
  display: block;
  fill: var(--text);
}
.secondary {
  background-color: var(--secondary);
  color: var(--text);
}
.secondary-hover {
  border: 1px solid var(--secondary-hover);
  background-color: var(--secondary);
  color: var(--text);
}
.secondary-hover:hover {
  background-color: var(--secondary-hover);
}

.warning {
  background-color: var(--warning);
  color: var(--text);
}
.warning-hover {
  border: 1px solid var(--warning-hover);
  background-color: var(--warning);
  color: var(--text);
}
.warning-hover:hover {
  background-color: var(--warning-hover);
}

.border-light-background {
  border: 1px solid var(--light-background);
}

.filler {
  background-color: var(--filler);
}

.scrollable-container {
  scrollbar-width: thin !important;
  scrollbar-color: transparent transparent !important;
}
/* Custom scrollbar styles */
.custom-scrollbar::-webkit-scrollbar {
  width: 12px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background-color: transparent;
  border-radius: 6px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background-color: transparent;
}


Содержимое файла main.tsx представлено следующим кодом:
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";
import "virtual:uno.css";
import { BrowserRouter } from "react-router-dom";
import { Provider } from "react-redux";
import { store } from "./store/index.ts";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
);


Содержимое файла vite-env.d.ts представлено следующим кодом:
/// <reference types="vite/client" />
/// <reference types="vite-plugin-svgr/client" />

Содержимое файла setupLCC.tsx представлено следующим кодом:
import {
  Scene,
  WebGLRenderer,
  PerspectiveCamera,
  AmbientLight,
  DirectionalLight,
  // PCFSoftShadowMap,
} from "three";
import { TrackballControls } from "three/examples/jsm/Addons.js";

export default function setupLCC(
  scene: Scene,
  renderer: WebGLRenderer,
  camera: PerspectiveCamera,
  controls: TrackballControls
) {
  camera.position.set(20, 20, -5);
  camera.lookAt(scene.position);
  renderer.setClearColor(0x3f3f3f, 1);
  renderer.shadowMap.enabled = true;
  // renderer.shadowMap.type = PCFSoftShadowMap;

  const ambientLight = new AmbientLight(0xffffff, 1.6);
  scene.add(ambientLight);

  const directionalLight = new DirectionalLight(0xffffff, 2.3);
  directionalLight.position.set(140, 140, -15);
  directionalLight.castShadow = true;
  directionalLight.shadow.mapSize.width = 1024; // default
  directionalLight.shadow.mapSize.height = 1024; // default
  directionalLight.shadow.camera.near = 1;
  directionalLight.shadow.camera.far = 1000;
  directionalLight.shadow.camera.left = -10;
  directionalLight.shadow.camera.right = 10;
  directionalLight.shadow.camera.top = 10;
  directionalLight.shadow.camera.bottom = -10;
  directionalLight.shadow.bias = -0.0002;
  scene.add(directionalLight);

  controls.rotateSpeed = 1.0;
  controls.zoomSpeed = 1.2;
  controls.panSpeed = 0.8;
  controls.noZoom = false;
  controls.noPan = false;
  controls.staticMoving = false;
  controls.dynamicDampingFactor = 0.2;

  // return directionalLight.shadow.camera;
}


Содержимое файла 404.tsx представлено следующим кодом:
import { Link } from "react-router-dom";
export default function Er404() {
  return (
    <div className="h-full w-full">
      <div className="bg-emerald-8 p-4 w-[80%] mx-auto mt-10">
        <h2>This link does not exist.</h2>
      <h2>You probably doing something wrong.</h2>{" "}
      <h2>
        Go <Link to="/" className="color-amber-4">Home</Link>
      </h2>
      </div>
      
    </div>
  );
}


Содержимое файла ModelControls.tsx представлено следующим кодом:
import { controlElement } from "../types/models";
import { useAppSelector } from "../hooks/redux";
import SControlJoystic from "./shared/SControlJoystick";
import SSetButton from "./shared/SSetButton";
import SArrowButtons from "./shared/SArrowButtons";
import SPowerButton from "./shared/SPowerButton";
import SEmergencyStopButton from "./shared/SEmergencyStopButton";
import "./css/ControlGrid.css";

export const ModelControlsComponent = () => {
  const modelControls = useAppSelector((state) => state.model.modelControls);

  function chooseElement(el: controlElement) {
    if (
      ![
        "Joystick",
        "setButton",
        "ArrowButtons",
        "PowerButton",
        "EmergencyStop",
      ].includes(el.element)
    )
      return <div>Element Not Found</div>;
    return (
      <div key={el.name} className="p-2">
        {/* <p>{el.name}</p> */}
        {(el.element === "Joystick" && (
          <SControlJoystic key={el.name} element={el} />
        )) ||
          (el.element === "setButton" && (
            <SSetButton key={el.name} element={el} />
          )) ||
          (el.element === "ArrowButtons" && (
            <SArrowButtons key={el.name} element={el} />
          )) ||
          (el.element === "PowerButton" && (
            <SPowerButton key={el.name} element={el} />
          )) ||
          (el.element === "EmergencyStop" && (
            <SEmergencyStopButton key={el.name} />
          ))}
      </div>
    );
  }

  const positions: { [key: string]: controlElement[] } = {
    TopLeft: [],
    Top: [],
    TopRight: [],
    Left: [],
    Center: [],
    Right: [],
    BottomLeft: [],
    Bottom: [],
    BottomRight: [],
  };

  modelControls.controlElements?.forEach((el) => {
    const position =
      el.position && positions[el.position] ? el.position : "Center";
    positions[position].push(el);
  });

  return (
    <div className="control-grid">
      {Object.keys(positions).map((position) => (
        <div key={position} className={`flex`}>
          {positions[position].map((el) => chooseElement(el))}
        </div>
      ))}
    </div>
  );
};


Содержимое файла ModelControlsInputs.tsx представлено следующим кодом:
import { useActions } from "../hooks/actions";
import { useAppSelector } from "../hooks/redux";
import { xyz } from "../types/models";

export const ModelControlsInputs = () => {
  const actions = useActions();
  const model = useAppSelector((state) => state.model);
  const modelControls = model.modelControls.models;
  return (
    <div className="flex flex-wrap">
      {Object.keys(modelControls).map((it) => {
        //TODO: remove useGetModels from here, it errors with react hooks not stated number
        const part = model.positions[it];

        return (
          <div key={it} className="p-2 m-2 border-light-background">
            <p>{it.replace(/_/g, " ")}</p>
            <div className="flex gap-3 flex-wrap">
              {modelControls[it].position && (
                <div>
                  <p>Позиция</p>
                  {(
                    Object.keys(modelControls[it].position) as Array<keyof xyz>
                  ).map((axis) => (
                    <div
                      key={`pos-${axis}`}
                      className="flex flex-justify-between"
                    >
                      <span>{axis}</span>
                      <input
                        type="number"
                        value={Number(part.position?.[axis] || 0)}
                        min={
                          Number(modelControls[it]?.position?.[axis]?.[0]) ||
                          -10
                        }
                        max={
                          Number(modelControls[it]?.position?.[axis]?.[1]) || 10
                        }
                        step={0.1}
                        onChange={(e) => {
                          actions.updateModelPositionLocal({
                            command: "set",
                            value: Number(e.target.value),
                            path: `${it}/position/${axis}`,
                          });
                        }}
                      />
                    </div>
                  ))}
                </div>
              )}
              {modelControls[it].rotation && (
                <div>
                  <p>Поворот</p>
                  {(
                    Object.keys(modelControls[it].rotation) as Array<keyof xyz>
                  ).map((axis) => (
                    <div
                      key={`rot-${axis}`}
                      className="flex flex-justify-between"
                    >
                      <span>{axis}</span>
                      <input
                        type="number"
                        value={Number(part.rotation?.[axis] || 0)}
                        min={
                          Number(modelControls[it].rotation?.[axis]?.[0]) || -10
                        }
                        max={
                          Number(modelControls[it].rotation?.[axis]?.[1]) || 10
                        }
                        step={0.1}
                        onChange={(e) => {
                          actions.updateModelPositionLocal({
                            command: "set",
                            value: Number(e.target.value),
                            path: `${it}/rotation/${axis}`,
                          });
                        }}
                      />
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};


Содержимое файла ModelPreview.tsx представлено следующим кодом:
import { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { GLTFLoader, TrackballControls } from "three/examples/jsm/Addons.js";
import setupLCC from "../additions/setupLCC";

interface ModelPreview {
  model: ArrayBuffer;
  setExternalError?: (text: string | null) => void;
  size?: {
    x: number;
    y: number;
  };
}
//TODO:fix model reloading error, canvas does not creates after file with error was loaded
const ModelPreview = ({ model, size, setExternalError }: ModelPreview) => {
  const mountRef = useRef<HTMLDivElement>(null);
  const sceneRef = useRef(new THREE.Scene());
  const modelRef = useRef<THREE.Object3D | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  //TODO: ref for renderer and controls

  useEffect(() => {
    setErrorMessage(null);
    if (setExternalError) setExternalError(null);
    // Сбрасываем состояние ошибки перед каждой загрузкой модели

    if (mountRef.current === null) return;
    const mount = mountRef.current;
    const scene = sceneRef.current;
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    mount.replaceChildren(renderer.domElement);
    if (size) renderer.setSize(size.x, size.y);
    else renderer.setSize(600, 600);

    const camera = new THREE.PerspectiveCamera(
      75,
      (size?.x || 600) / (size?.y || 600),
      0.1,
      1000
    );
    const controls = new TrackballControls(camera, renderer.domElement);
    setupLCC(scene, renderer, camera, controls);

    const loader = new GLTFLoader();

    // Удаляем предыдущую модель, если она существует
    if (modelRef.current) {
      scene.remove(modelRef.current);
      modelRef.current = null;
    }

    // Парсим ArrayBuffer как GLB файл
    try {
      loader.parse(
        model,
        "",
        (gltf) => {
          modelRef.current = gltf.scene;
          scene.add(gltf.scene);
        },
        (error) => {
          // console.error("Error parsing model:", error);
          setErrorMessage("Error parsing model: " + error.message);
          if (setExternalError)
            setExternalError("Error parsing model: " + error.message);
        }
      );
    } catch (e) {
      setErrorMessage("Error while trying to parse file");
      if (setExternalError)
        setExternalError("Error while trying to parse file");
    }

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      // Очищаем сцену и рендерер
      scene.clear();
      renderer.dispose();
      controls.dispose();
      if (mount) {
        mount.removeChild(renderer.domElement);
      }
    };
  }, [model, size]);

  return (
    <div>
      <p>{errorMessage}</p>
      {!errorMessage && <div ref={mountRef} />}
      {errorMessage && (
        <div
          style={{ width: size?.x || 600, height: size?.y || 600 }}
          className="flex filler"
        >
          <div className="secondary m-auto p-10 font-bold text-5">
            {errorMessage}
          </div>
        </div>
      )}
    </div>
  );
};
export default ModelPreview;


Содержимое файла ModelViewer.tsx представлено следующим кодом:
import { useRef } from "react";
import { useThreeSetup } from "../hooks/useThreeSetup";
import { useModelLoader } from "../hooks/useModelLoader";
import { ModelControlsInputs } from "./ModelControlsInputs";
import { ModelControlsComponent } from "./ModelControls";
import { useAppSelector } from "../hooks/redux";
import STabViewer from "./shared/STabViewer";
import STab from "./shared/STab";

interface ModelViewerProps {
  size?: { x: number; y: number };
  modelControlsEnable: boolean;
  children?: React.ReactNode;
}

const ModelViewer = ({
  size,
  modelControlsEnable,
  children,
}: ModelViewerProps) => {
  const model = useAppSelector((state) => state.model);

  const mountRef = useRef<HTMLDivElement>(null);
  const { scene } = useThreeSetup(mountRef, size);
  const { errorMessage, modelLoaded } = useModelLoader(scene);
  const loaderError = model.errorMessage;

  return (
    <div className="relative flex flex-wrap">
      <div
        className="relative flex"
        style={{ width: size?.x || 600, height: size?.y || 600 }}
      >
        <div
          ref={mountRef}
          style={{
            visibility: modelLoaded ? "visible" : "hidden",
            position: modelLoaded ? "initial" : "absolute",
          }}
        />
        {(errorMessage || loaderError) && (
          <div
            style={{ width: size?.x || 600, height: size?.y || 600 }}
            className="flex filler absolute"
          >
            <div className="secondary m-auto p-10 font-bold text-5">
              {loaderError || errorMessage}
            </div>
          </div>
        )}
        {children}
      </div>
      {modelLoaded && modelControlsEnable && model.modelControls?.models && (
        <STabViewer>
          <STab title="Интерфейс" default>
            <ModelControlsComponent />
          </STab>
          <STab title="Ручной ввод">
            <ModelControlsInputs />
          </STab>
        </STabViewer>
      )}
    </div>
  );
};

export default ModelViewer;


Содержимое файла Navigation.tsx представлено следующим кодом:
import { Link } from 'react-router-dom';

export default function Navigation() {
  return (
    <nav className="fixed flex justify-between items-center h-[20px] px-4 py-6 w-full secondary">
      <Link to="/" className="color-zinc-2 no-underline">
        <h2>Рентген</h2>
      </Link>
      <div className="flex gap-2">
        <Link
          to="/Settings"
          className="color-zinc-2 no-underline hover:color-emerald-2"
        >
         Настройки
        </Link>
        <Link
          to="/"
          className="color-zinc-2 no-underline hover:color-emerald-2"
        >
          Дом
        </Link>
        <Link
          to="/login"
          className="color-zinc-2 no-underline hover:color-emerald-2"
        >
          Вход
        </Link>
      </div>
    </nav>
  );
}


Содержимое файла ControlGrid.css представлено следующим кодом:
.control-grid {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(3, minmax(0, auto));
  grid-auto-rows: minmax(100px, auto);
  padding: 10px;
}
.control-grid > div {
  align-items: center;
}
.control-grid > div:nth-child(3),
.control-grid > div:nth-child(6),
.control-grid > div:nth-child(9) {
  justify-content: end;
}
.control-grid > div:nth-child(1),
.control-grid > div:nth-child(4),
.control-grid > div:nth-child(7) {
  justify-content: start;
}
.control-grid > div:nth-child(2),
.control-grid > div:nth-child(5),
.control-grid > div:nth-child(8) {
  justify-content: space-evenly;
}

Содержимое файла SArrowButton.tsx представлено следующим кодом:
import "./css/SArrowButton.css";
import { HTMLAttributes } from "react";

export interface SArrowButton extends HTMLAttributes<HTMLDivElement> {
  left?: boolean;
  right?: boolean;
  up?: boolean;
  down?: boolean;
}

export default function SArrowButton({
  left,
  right,
  up,
  down,
  className,
  ...restProps
}: SArrowButton) {
  let cls = "";
  cls = left ? "arr-btn-left" : cls;
  cls = right ? "arr-btn-right" : cls;
  cls = up ? "arr-btn-up" : cls;
  cls = down ? "arr-btn-down" : cls;

  return (
    <div {...restProps} className={`arr-btn ${cls} ${className || ""}`}></div>
  );
}


Содержимое файла SArrowButtons.tsx представлено следующим кодом:
import { useActions } from "../../hooks/actions";
import {
  useGetCanControl,
} from "../../hooks/model";
import SArrowButton from "./SArrowButton";
import { SArrowButtonsElement } from "../../types/models";
import { useState, useEffect } from "react";

export interface SArrowButtonsProps {
  element: SArrowButtonsElement;
}

export default function SArrowButtons({ element }: SArrowButtonsProps) {
  const actions = useActions();
  const enabled = useGetCanControl();
  const step = 0.1; // Шаг изменения позиции
  const path = element.props.path;
  const [direction, setDirection] = useState<"increase" | "decrease" | null>(
    null
  );

  // Обработчик для увеличения значения
  const handleIncrease = () => {
    if (enabled) {
      setDirection("increase");
    }
  };

  // Обработчик для уменьшения значения
  const handleDecrease = () => {
    if (enabled) {
      setDirection("decrease");
    }
  };

  // Остановка движения
  const stopMovement = () => {
    setDirection(null);
  };

  // Эффект для обработки интервала
  useEffect(() => {
    if (!direction || !enabled) return;

    const intervalId = setInterval(() => {
      if(direction === "increase") {
        actions.updateModelPositionLocal({
          command: "add",
          value: step,
          path: path,
        });
      } else if (direction === "decrease") {
        actions.updateModelPositionLocal({
          command: "add",
          value: -step,
          path: path,
        });;
      }
    }, 100);

    return () => clearInterval(intervalId);
  }, [direction, enabled, path]);

  return (
    <div className="m-2 flex">
      {element.props.type === "up/down" ? (
        <div className="flex flex-col gap-2">
          <SArrowButton
            up
            onMouseDown={handleIncrease}
            onMouseUp={stopMovement}
            onMouseLeave={stopMovement}
            className={enabled ? "" : "opacity-50"}
          />
          <SArrowButton
            down
            onMouseDown={handleDecrease}
            onMouseUp={stopMovement}
            onMouseLeave={stopMovement}
            className={enabled ? "" : "opacity-50"}
          />
        </div>
      ) : (
        <div className="flex gap-2">
          <SArrowButton
            left
            onMouseDown={handleDecrease}
            onMouseUp={stopMovement}
            onMouseLeave={stopMovement}
            className={enabled ? "" : "opacity-50"}
          />
          <SArrowButton
            right
            onMouseDown={handleIncrease}
            onMouseUp={stopMovement}
            onMouseLeave={stopMovement}
            className={enabled ? "" : "opacity-50"}
          />
        </div>
      )}
    </div>
  );
}


Содержимое файла SArrowCross.tsx представлено следующим кодом:
import "./css/SArrowCross.css";
import SArrowButton from "./SArrowButton";

export default function SArrowCross() {
  return (
    <div>
      <div className="cr-row">
        <div className="squire-small" />
        <SArrowButton up />
      </div>
      <div className="cr-row">
        <SArrowButton right />
        <div className="squire" />
        <SArrowButton left />
      </div>
      <div className="cr-row">
        <div className="squire-small" />
        <SArrowButton down />
      </div>
    </div>
  );
}


Содержимое файла SControlJoystick.tsx представлено следующим кодом:
import { Joystick } from "react-joystick-component";
import { JoystickControlElement } from "../../types/models";
import { IJoystickUpdateEvent } from "react-joystick-component/build/lib/Joystick";
import { useState, useEffect } from "react";
import { useActions } from "../../hooks/actions";
import { useGetCanControl } from "../../hooks/model";
export interface SControlJoystic {
  element: JoystickControlElement;
}

export default function SControlJoystic({ element }: SControlJoystic) {
  const actions = useActions();
  const enabled = useGetCanControl();
  const [joystickState, setJoystickState] =
    useState<IJoystickUpdateEvent | null>(null);
  const step = 0.1;

  useEffect(() => {
    let intervalId: number;
    if (joystickState?.type === "move") {
      intervalId = setInterval(() => {
        switch (joystickState.direction) {
          case "FORWARD":
            actions.updateModelPositionLocal({
              command: "add",
              value: step,
              path: element.props.ypath,
            });
            break;
          case "BACKWARD":
            actions.updateModelPositionLocal({
              command: "add",
              value: -step,
              path: element.props.ypath,
            });
            break;
          case "LEFT":
            actions.updateModelPositionLocal({
              command: "add",
              value: step,
              path: element.props.xpath,
            });
            break;
          case "RIGHT":
            actions.updateModelPositionLocal({
              command: "add",
              value: -step,
              path: element.props.xpath,
            });
            break;
        }
      }, 100);
    }

    // Очистка интервала при изменении состояния или размонтировании
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [joystickState]);

  return (
    <div className="m-2">
      <Joystick
        throttle={100}
        stickColor="var(--secondary)"
        baseColor="var(--secondary-dark)"
        move={(e) => setJoystickState(e)}
        start={(e) => setJoystickState(e)}
        stop={() => setJoystickState(null)}
        disabled={!enabled}
      />
    </div>
  );
}


Содержимое файла SEmergencyStopButton.tsx представлено следующим кодом:
import { useActions } from "../../hooks/actions";
import WarningIcon from "../../icons/svg/warning.svg?react";
import "./css/SCircleButton.css";

export default function SEmergencyStopButton() {
  const actions = useActions();

  return (
    <div
      className="circle-button warning warning-hover"
      onClick={() => {
        actions.setEmergency();
      }}
    >
      <WarningIcon className="circle-button_icon" />
    </div>
  );
}


Содержимое файла SLSelect.tsx представлено следующим кодом:
export interface SLSelectProps {
  text: string;
  name: string;
  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;
  options?: Array<{ value: string; name: string; disable?: boolean }>;
  value?: string;
  className: string;
}

export default function SLSelect(props: SLSelectProps) {
  //TODO:add options disabling
  return (
    <div className={props.className}>
      <label htmlFor={props.name} className="mx-2">
        {props.text}
      </label>
      <select
        className="p-1 border border-white"
        name={props.name}
        onChange={props.onChange}
        value={props.value}
        id={props.name}
      >
        {props.options?.map((option, index) => (
          <option key={index} value={option.value}>
            {option.name}
          </option>
        ))}
      </select>
    </div>
  );
}


Содержимое файла SPowerButton.tsx представлено следующим кодом:
import { useActions } from "../../hooks/actions";
import { useAppSelector } from "../../hooks/redux";
import { useState, useEffect } from "react";
import PowerIcon from "../../icons/svg/power.svg?react";
import { SPowerButtonElement } from "../../types/models";
import "./css/SCircleButton.css";

export interface SPowerButton {
  element: SPowerButtonElement;
}

export default function SPowerButton({ element }: SPowerButton) {
  const actions = useActions();
  const model = useAppSelector((state) => state.model);
  const positions = model.positions;
  const step = 0.1;
  const [clicked, setClicked] = useState(false);

  useEffect(() => {
    let intervalId: number;
    if (clicked && model.isEnabled && !model.isEmergencyStoped) {
      actions.setControlsEnabled(false);
      intervalId = setInterval(() => {
        let ended = true;
        element.props.defaultValues.forEach((it) => {
          let currentValue: any = positions;
          const path_spl = it.path.split("/");
          for (let i = 0; i < path_spl.length - 1; i++) {
            const key = path_spl[i];
            if (!currentValue[key]) {
              currentValue[key] = {};
            }
            currentValue = currentValue[key];
          }
          currentValue = currentValue[path_spl[path_spl.length - 1]] as number;

          if (currentValue !== undefined && currentValue !== it.value) {
            ended = false;
            if (currentValue > it.value) {
              actions.updateModelPositionLocal({
                command: "set",
                value: Math.max(currentValue - step, it.value),
                path: it.path,
              });
            }
            if (currentValue < it.value) {
              actions.updateModelPositionLocal({
                command: "set",
                value: Math.min(currentValue + step, it.value),
                path: it.path,
              });
            }
          }
        });
        if (ended) {
          actions.switchEanbled();
          actions.setControlsEnabled(true);
          setClicked(false);
        }
      }, 100);
    } else if (clicked) {
      actions.switchEanbled();
      setClicked(false);
    }

    // Очистка интервала при изменении состояния или размонтировании
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [clicked, positions]);

  return (
    <div
      className="circle-button secondary secondary-hover"
      onClick={() => {
        setClicked(true);
      }}
    >
      <PowerIcon className="circle-button_icon" />
    </div>
  );
}


Содержимое файла SSetButton.tsx представлено следующим кодом:
import { SetButtonControlElement } from "../../types/models";
import { useActions } from "../../hooks/actions";
import { useAppSelector } from "../../hooks/redux";
import "./css/SSetButton.css";

import { useState, useEffect } from "react";
import { useGetCanControl } from "../../hooks/model";

export interface SSetButton {
  element: SetButtonControlElement;
}

export default function SSetButton({ element }: SSetButton) {
  const actions = useActions();
  const model = useAppSelector((state) => state.model);
  const enabled = useGetCanControl();
  const positions = model.positions;
  const step = 0.1;
  const [clicked, setClicked] = useState(false);

  useEffect(() => {
    let intervalId: number;
    if (clicked) {
      actions.setControlsEnabled(false);
      intervalId = setInterval(() => {
        let ended = true;
        element.props.values.forEach((it) => {
          let currentValue: any = positions;
          const path_spl = it.path.split("/");
          for (let i = 0; i < path_spl.length - 1; i++) {
            const key = path_spl[i];
            if (!currentValue[key]) {
              currentValue[key] = {};
            }
            currentValue = currentValue[key];
          }
          currentValue = currentValue[path_spl[path_spl.length - 1]] as number;
          if (!model.isEmergencyStoped) {
            if (currentValue !== undefined && currentValue !== it.value) {
              ended = false;
              if (currentValue > it.value) {
                actions.updateModelPositionLocal({
                  command: "set",
                  value: Math.max(currentValue - step, it.value),
                  path: it.path,
                });
              }
              if (currentValue < it.value) {
                actions.updateModelPositionLocal({
                  command: "set",
                  value: Math.min(currentValue + step, it.value),
                  path: it.path,
                });
              }
            }
          } else {
            clearInterval(intervalId);
            setClicked(false);
          }
        });
        if (ended) {
          actions.setControlsEnabled(true);
          setClicked(false);
        }
      }, 100);
    }

    // Очистка интервала при изменении состояния или размонтировании
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [clicked, positions]);

  return (
    <div className="m-2">
      <div
        className="setButton"
        onClick={() => {
          if (enabled) setClicked(true);
        }}
      >
        {element.name}
      </div>
    </div>
  );
}


Содержимое файла SStatusIndicator.tsx представлено следующим кодом:
import { HTMLAttributes } from "react";
import { useAppSelector } from "../../hooks/redux";
import "./css/SStatusIndicator.css";

const SStatusIndicator = (props: HTMLAttributes<HTMLDivElement>) => {
  const model = useAppSelector((state) => state.model);
  const visible = model.isErrorData || model.isLoadingData;
  const status =
    (model.isEnabled &&
      model.isControlsEnabled &&
      !model.isEmergencyStoped &&
      "Online") ||
    (model.isEnabled &&
      !model.isControlsEnabled &&
      !model.isEmergencyStoped &&
      "Working") ||
    (model.isEnabled && model.isEmergencyStoped && "Emergency Stopped") ||
    (!model.isEnabled && "Offline");
  return (
    <div {...props} className={"status-container " + props.className}>
      <div data-status={status} className="status-circle" />
      <div>{status}</div>
    </div>
  );
};

export default SStatusIndicator;


Содержимое файла STab.tsx представлено следующим кодом:
import { HTMLAttributes } from "react";
export interface STabProps extends HTMLAttributes<HTMLDivElement> {
  default?: boolean;
  title: string;
}

const STab = (props: STabProps) => {
  return <div className={"Tab" + props.className}>{props.children}</div>;
};

export default STab;


Содержимое файла STabViewer.tsx представлено следующим кодом:
import { HTMLAttributes, ReactElement, useEffect, useState } from "react";
import { STabProps } from "./STab";
import "./css/STab.css";

interface STabViewerProps extends HTMLAttributes<HTMLDivElement> {
  tabsPosition?: "top" | "left";
  children?: ReactElement<STabProps>[];
}

const STabViewer = ({
  tabsPosition = "top",
  children,
  ...rest
}: STabViewerProps) => {
  const [tabs, setTabs] = useState<{ [key: string]: ReactElement<STabProps> }>(
    {}
  );
  const [tab, setTab] = useState<string | null>(null);
  useEffect(() => {
    setTabs({
      ...(children?.reduce((acc, rec) => {
        if (rec.props.default) setTab(rec.props.title);
        return { ...acc, [rec.props.title]: rec };
      }, {}) || {}),
    });
  }, []);

  return (
    <div {...rest} className={`tabs-viewer ${tabsPosition} ` + rest.className}>
      <div className="tabs-titles-container">
        {Object.keys(tabs).map((it) => (
          <div
            key={it}
            className={"tab-title " + ((it == tab && "active") || "")}
            onClick={() => {
              setTab(it);
            }}
          >
            {it}
          </div>
        ))}
      </div>
      <div className="tabs-container">{tab && tabs[tab]}</div>
    </div>
  );
};

export default STabViewer;


Содержимое файла SArrowButton.css представлено следующим кодом:
.arr-btn {
  width: 0;
  height: 0;
}

.arr-btn-down {
  border-left: 30px solid transparent;
  border-right: 30px solid transparent;
  border-top: 35px solid var(--secondary);
}

.arr-btn-down:hover {
  border-top: 35px solid var(--secondary-hover);
}

.arr-btn-up {
  border-left: 30px solid transparent;
  border-right: 30px solid transparent;
  border-bottom: 35px solid var(--secondary);
}

.arr-btn-up:hover {
  border-bottom: 35px solid var(--secondary-hover);
}

.arr-btn-left {
  border-top: 30px solid transparent;
  border-bottom: 30px solid transparent;
  border-right: 35px solid var(--secondary);
}

.arr-btn-left:hover {
  border-right: 35px solid var(--secondary-hover);
}

.arr-btn-right {
  border-top: 30px solid transparent;
  border-bottom: 30px solid transparent;
  border-left: 35px solid var(--secondary);
}

.arr-btn-right:hover {
  border-left: 35px solid var(--secondary-hover);
}


Содержимое файла SArrowCross.css представлено следующим кодом:
.squire {
  width: 45px;
  height: 45px;
}
.squire-small {
  width: 22.5px;
  height: 22.5px;
}
.cr-row {
  display: flex;
  align-items: center;
  justify-items: space-between;
}


Содержимое файла SCircleButton.css представлено следующим кодом:
.circle-button {
  padding: 10px;
  border-radius: 50%;
  text-align: center;
  cursor: pointer;
  user-select: none;
  flex-grow: 0;
  align-self: center;
}

.circle-button_icon {
  width: 65px;
  height: 65px;
}



Содержимое файла SSetButton.css представлено следующим кодом:
.setButton {
  background-color: var(--secondary);
  padding: 10px;
  border-radius: 10px;
  text-align: center;
  border: 1px solid var(--secondary-hover);
  cursor: pointer;
  user-select: none;
}
.setButton:hover {
  background-color: var(--secondary-hover);
}


Содержимое файла SStatusIndicator.css представлено следующим кодом:
.status-circle {
  width: 10px;
  height: 10px;
  border-radius: 50%;
}
.status-container {
  display: flex;
  gap: 5px;
  align-items: center;
}
.status-circle[data-status="Offline"] {
  background-color: var(--light-background);
}
.status-circle[data-status="Emergency Stopped"] {
  background-color: var(--warning);
}
.status-circle[data-status="Working"] {
  background-color: var(--good);
}
.status-circle[data-status="Online"] {
  background-color: var(--good);
}

Содержимое файла STab.css представлено следующим кодом:
.tabs-viewer {
  flex-grow: 1;
}
.tabs-container {
  border: 1px var(--light-background) solid;
  flex-grow: 1;
}
.tabs-titles-container {
  background-color: var(--light-background);
  display: flex;
}

.tabs-viewer.top > .tabs-titles-container > .tab-title {
  padding: 6px;
  margin-bottom: -1px;
  border-bottom: 1px white solid;
  opacity: 1;
}
.tabs-viewer.top > .tabs-titles-container > .tab-title.active {
  background-color: var(--background);
  border: 1px var(--light-background) solid;
  opacity: 1;
  border-bottom: none;
}

.tabs-viewer.left {
  display: flex;
  height: 100vh;
}

.tabs-viewer.left > .tabs-titles-container {
  flex-direction: column;
  height: 100%;
  min-width: 150px;
}

.tabs-viewer.left > .tabs-titles-container > .tab-title {
  padding: 6px;
  margin-right: 0;
  border-right: 1px white solid;
  opacity: 1;
}

.tabs-viewer.left > .tabs-titles-container > .tab-title.active {
  background-color: var(--background);
  border: 1px var(--light-background) solid;
  opacity: 1;
  border-right: none;
}


Содержимое файла access.ts представлено следующим кодом:
import { useAppSelector } from "./redux";

export default function useHasAccess(userId: number){
  const currentUser = useAppSelector((state) => state.user);
  return currentUser.id === userId || currentUser.role == "ADMIN";
  
}

export function useHasAccessRestricted(userId: number) {
  const currentUser = useAppSelector((state) => state.user);
  return currentUser.id === userId;
}

export function useHasAdminAccess() {
  const currentUser = useAppSelector((state) => state.user);
  return currentUser.role == "ADMIN";
}

Содержимое файла actions.ts представлено следующим кодом:
// import { userActions } from "./../store/user/user.slice";
import { modelActions } from "../store/model/model.slice";
import { bindActionCreators } from "@reduxjs/toolkit";
import { useAppDispatch } from "../store";
import { connectActions } from "../store/connect/connect.slice";

const actions = {
  // ...userActions,
  ...modelActions,
  ...connectActions
};
export const useActions = () => {
  const dispatch = useAppDispatch();
  return bindActionCreators(actions, dispatch);
};


Содержимое файла model.ts представлено следующим кодом:
import { useAppSelector } from "./redux";

export function useGetModelPositions(name: string) {
  const positions = useAppSelector((state) => state.model.positions);
  return positions.models.find((it) => it.name === name);
}

export function useGetModelControls(name: string) {
  const modelControls = useAppSelector((state) => state.model.modelControls);
  return modelControls.models.find((it) => it.name === name);
}

export function useGetCanControl() {
  const model = useAppSelector((state) => state.model);
  return model.isControlsEnabled && model.isEnabled && !model.isEmergencyStoped;
}


Содержимое файла redux.ts представлено следующим кодом:
import { RootState } from "../store";
import { TypedUseSelectorHook, useSelector } from "react-redux";

export const useAppSelector: TypedUseSelectorHook<RootState>= useSelector

Содержимое файла useModelLoader.ts представлено следующим кодом:
import { useAppSelector } from "./redux";
import { useState, useRef, useEffect } from "react";
import { GLTFLoader } from "three/examples/jsm/Addons.js";
import * as THREE from "three";
import { useAppDispatch } from "../store";
import { xyz, ModelPositions } from "../types/models";
import { updateModelDataAsync } from "../store/model/model.slice";
import { useActions } from "./actions";

export const useModelLoader = (scene: THREE.Scene) => {
  const modelRef = useRef<THREE.Object3D | null>(null);
  const [modelData, setModelData] = useState<ArrayBuffer | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [modelLoaded, setModelLoaded] = useState(false);
  const dispatch = useAppDispatch();
  const actions = useActions();

  const model = useAppSelector((state) => state.model);
  const isLoading = model.isLoadingData || model.isLoadingControls;
  const isError = model.isErrorData || model.isErrorControls;
  const modelControls = model.modelControls;
  const positions = model.positions;

  useEffect(() => {
    async function modelLoad() {
      try {
        const result = await dispatch(updateModelDataAsync()).unwrap();
        setModelData(result);
      } catch (error) {
        console.error("Failed to load model data:", error);
      }
    }
    modelLoad();
  }, [model.name]);

  useEffect(() => {
    setModelLoaded(false);
    if (!modelData || isLoading || isError) return;

    const loader = new GLTFLoader();
    if (modelRef.current) {
      scene.remove(modelRef.current);
      modelRef.current = null;
    }

    loader.parse(
      modelData,
      "",
      (gltf) => {
        modelRef.current = gltf.scene;
        scene.add(gltf.scene);
        setModelLoaded(true);

        const newPositions: ModelPositions = {};
        gltf.scene.traverse((child) => {
          if (child.type === "Mesh") {
            child.castShadow = true;
            child.receiveShadow = true;
          }
          const controlEntry = modelControls?.models?.[child.name];
          if (controlEntry) {
            const position: xyz = {};
            const rotation: xyz = {};

            if (controlEntry.position) {
              Object.keys(controlEntry.position).forEach((axis) => {
                if (["x", "y", "z"].includes(axis)) {
                  position[axis as keyof xyz] =
                    child.position[axis as "x" | "y" | "z"];
                }
              });
            }

            if (controlEntry.rotation) {
              Object.keys(controlEntry.rotation).forEach((axis) => {
                if (["x", "y", "z"].includes(axis)) {
                  rotation[axis as keyof xyz] =
                    child.rotation[axis as "x" | "y" | "z"];
                }
              });
            }

            newPositions[child.name] = {
              position: Object.keys(position).length ? position : undefined,
              rotation: Object.keys(rotation).length ? rotation : undefined,
            };
          }
        });

        actions.updatePositionsLocal(newPositions);
      },
      (error) => {
        setErrorMessage("Error parsing model: " + error.message);
      }
    );
  }, [modelData, scene, modelControls]);

  useEffect(() => {
    if (modelLoaded && modelRef.current) {
      Object.keys(positions).forEach((it) => {
        const part = modelRef.current?.getObjectByName(it);
        if (part) {
          if (positions[it].position) {
            if (positions[it].position.x)
              part.position.x = positions[it].position.x;
            if (positions[it].position.y)
              part.position.y = positions[it].position.y;
            if (positions[it].position.z)
              part.position.z = positions[it].position.z;
          }
          if (positions[it].rotation) {
            if (positions[it].rotation.x)
              part.rotation.x = positions[it].rotation.x;
            if (positions[it].rotation.y)
              part.rotation.y = positions[it].rotation.y;
            if (positions[it].rotation.z)
              part.rotation.z = positions[it].rotation.z;
          }
        }
      });
    }
  }, [positions, modelLoaded]);

  return { modelRef, errorMessage, modelLoaded };
};


Содержимое файла useThreeSetup.ts представлено следующим кодом:
import { useEffect, useRef } from "react";
import * as THREE from "three";
import { TrackballControls } from "three/examples/jsm/Addons.js";
import setupLCC from "../additions/setupLCC";

export const useThreeSetup = (
  mountRef: React.RefObject<HTMLDivElement | null>,
  size?: { x: number; y: number }
) => {
  const sceneRef = useRef(new THREE.Scene());
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);
  const controlsRef = useRef<TrackballControls | null>(null);

  useEffect(() => {
    const mount = mountRef.current;
    if (!mount) return;

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    rendererRef.current = renderer;
    mount.replaceChildren(renderer.domElement);
    const width = size?.x || 600;
    const height = size?.y || 600;
    renderer.setSize(width, height);

    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
    cameraRef.current = camera;

    const controls = new TrackballControls(camera, renderer.domElement);
    controlsRef.current = controls;

    setupLCC(sceneRef.current, renderer, camera, controls);

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(sceneRef.current, camera);
    };
    animate();

    return () => {
      sceneRef.current.clear();
      renderer.dispose();
      controls.dispose();
      if (mount) mount.removeChild(renderer.domElement);
    };
  }, [size]);

  return {
    scene: sceneRef.current,
    renderer: rendererRef.current,
    camera: cameraRef.current,
    controls: controlsRef.current,
  };
};


Содержимое файла power.svg представлено следующим кодом:
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3"><path d="M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-84 31.5-156.5T197-763l56 56q-44 44-68.5 102T160-480q0 134 93 227t227 93q134 0 227-93t93-227q0-67-24.5-125T707-707l56-56q54 54 85.5 126.5T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm-40-360v-440h80v440h-80Z"/></svg>

Содержимое файла warning.svg представлено следующим кодом:
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#e3e3e3">
<path d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"/></svg>

Содержимое файла AddModel.tsx представлено следующим кодом:
import { useState } from "react";
import { useAddModelMutation } from "../store/model/model.api";
import ModelPreview from "../components/ModelPreview";
import { useNavigate } from "react-router-dom";

const AddModel = () => {
  //TODO: Fix model loading after error
  const [modelName, setModelName] = useState("");
  const [modelFile, setModelFile] = useState<ArrayBuffer | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [internalError, setInternalError] = useState<string | null>(null);
  const [addModel, { isLoading }] = useAddModelMutation();
  const navigate = useNavigate();

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result instanceof ArrayBuffer) {
          setModelFile(e.target.result);
        }
      };
      reader.readAsArrayBuffer(file);
    }
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!modelName || !modelFile) {
      setErrorMessage("Пожалуйста, заполните все поля.");
      return;
    }
    if (internalError) {
      setErrorMessage("Пожалуйста, загрузите модель без ошибок.");
      return;
    }
    try {
      await addModel({ name: modelName, data: modelFile }).unwrap();
      navigate("/"); // Перенаправляем на главную страницу после успешной загрузки
    } catch (error) {
      setErrorMessage("Ошибка при загрузке модели.");
    }
  };

  return (
    <div className="p-4 flex flex-justify-between">
      <form onSubmit={handleSubmit} className="space-y-4">
        <h1 className="text-2xl mb-4">Добавить модель</h1>
        <div>
          <label className="block text-sm font-medium text-gray-300">
            Название модели
          </label>
          <input
            type="text"
            value={modelName}
            onChange={(e) => setModelName(e.target.value)}
            className="mt-1 block  px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-300">
            Файл модели
          </label>
          <input
            type="file"
            onChange={handleFileChange}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            required
          />
        </div>

        {errorMessage && <p className="text-red-500">{errorMessage}</p>}
        <button
          type="submit"
          disabled={isLoading}
          className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md secondary-hover"
        >
          {isLoading ? "Загрузка..." : "Добавить модель"}
        </button>
      </form>
      {modelFile && (
        <div>
          <label className="block text-sm font-medium text-gray-300">
            Предпросмотр модели
          </label>
          <ModelPreview model={modelFile} setExternalError={setInternalError} />
        </div>
      )}
    </div>
  );
};

export default AddModel;


Содержимое файла Connect.tsx представлено следующим кодом:
import { useState } from "react";
import { useActions } from "../hooks/actions";
import { useAddConnectMutation } from "../store/connect/connect.api";
import "./css/Connect.css";

export default function Connect() {
  const [ip, setIp] = useState<string>("");
  const [port, setPort] = useState<string>("");
  const [user, setUser] = useState<string>("");
  const [password, setPassword] = useState<string>("");

  const { setConnect } = useActions();
  const [addConnect] = useAddConnectMutation();

  const handleInputChange = (field: string, value: string) => {
    switch (field) {
      case "ip":
        setIp(value);
        setConnect({ ip: value, port: Number(port), user, password });
        break;
      case "port":
        setPort(value);
        setConnect({ ip, port: Number(value), user, password });
        break;
      case "user":
        setUser(value);
        setConnect({ ip, port: Number(port), user: value, password });
        break;
      case "password":
        setPassword(value);
        setConnect({ ip, port: Number(port), user, password: value });
        break;
    }
  };

  const handleSubmit = async () => {
    try {
      const connectionData = {
        ip,
        port: Number(port),
        ...(user && { user }),
        ...(password && { password }),
      };
      await addConnect(connectionData).unwrap();
    } catch (error) {
      console.error("Ошибка при подключении:", error);
    }
  };

  return (
    <div className="connect">
      <div className="add-connection" onClick={handleSubmit}>
        Подключится к аппарату
      </div>
      <div>
        ip
        <input
          type="text"
          value={ip}
          onChange={(e) => handleInputChange("ip", e.target.value)}
        />
        port
        <input
          type="text"
          value={port}
          onChange={(e) => handleInputChange("port", e.target.value)}
        />
        user
        <input
          type="text"
          value={user}
          onChange={(e) => handleInputChange("user", e.target.value)}
        />
        password
        <input
          type="password"
          value={password}
          onChange={(e) => handleInputChange("password", e.target.value)}
        />
      </div>
      <div className="list-container"></div>
    </div>
  );
}


Содержимое файла Example.tsx представлено следующим кодом:
import { useEffect, useState, useRef } from "react";
import * as THREE from "three";
import { GLTFLoader, TrackballControls } from "three/examples/jsm/Addons.js";

const Example = ({ modelName }: { modelName: string }) => {
  const mountRef = useRef<HTMLDivElement>(null);
  const sceneRef = useRef(new THREE.Scene());
  const modelRef = useRef<THREE.Object3D | null>(null);
  const [position, setPosition] = useState(0);
  const [modelLoaded, setModelLoaded] = useState(false);

  useEffect(() => {
    if (mountRef.current === null) return;

    const scene = sceneRef.current;
    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
    camera.position.set(20, -20, 20);
    camera.lookAt(scene.position);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(600, 600);
    renderer.setClearColor(0x3f3f3f, 1);

    mountRef.current.replaceChildren(renderer.domElement);

    const ambientLight = new THREE.AmbientLight(0x808080);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 5, 5).normalize();
    scene.add(directionalLight);

    const controls = new TrackballControls(camera, renderer.domElement);
    controls.rotateSpeed = 1.0;
    controls.zoomSpeed = 1.2;
    controls.panSpeed = 0.8;
    controls.noZoom = false;
    controls.noPan = false;
    controls.staticMoving = false;
    controls.dynamicDampingFactor = 0.2;

    const loader = new GLTFLoader();

    // Fetch the model from the server
    fetch(`http://localhost:8046/api/models/${modelName}`)
      .then((response) => response.arrayBuffer())
      .then((data) => {
        // console.log(data)
        // Remove the previous model if it exists
        if (modelRef.current) {
          scene.remove(modelRef.current);
          modelRef.current = null;
        }

        // Parse the ArrayBuffer as a GLB file
        loader.parse(
          data,
          "", // Base path (empty since we're loading a binary file)
          (gltf) => {
            modelRef.current = gltf.scene; // Store the reference to the loaded model
            scene.add(gltf.scene);
            setModelLoaded(true);
          },
          (error) => {
            console.error("Error parsing model:", error);
          }
        );
      })
      .catch((error) => {
        console.error("Error loading model:", error);
      });

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      // Cleanup the scene and renderer
      scene.clear(); 
      if (mountRef.current) {
        mountRef.current.removeChild(renderer.domElement);
      }
    };
  }, [modelName]);

  useEffect(() => {
    if (modelLoaded && modelRef.current) {
      const tree = modelRef.current.getObjectByName("Cube");
      if (tree) {
        tree.position.x = position;
      }
    }
  }, [position, modelLoaded]);

  return (
    <div className="flex flex-1">
      <div ref={mountRef} />
      <div>
        <input
          type="number"
          value={position}
          onChange={(e) => setPosition(Number(e.target.value))}
        />
      </div>
    </div>
  );
};

export default Example;

Содержимое файла Settings.tsx представлено следующим кодом:
import STab from "../components/shared/STab";
import STabViewer from "../components/shared/STabViewer";
import AddModel from "./AddModel";
import Viewer from "./Viewer";

export default function Settings() {
  return (
    <STabViewer tabsPosition="left">
      <STab title="Просмотр моделей" default>
        <Viewer />
      </STab>
      <STab title="Загрузить модель">
        <AddModel />
      </STab>
    </STabViewer>
  );
}


Содержимое файла Viewer.tsx представлено следующим кодом:
import ModelViewer from "../components/ModelViewer";
import SLSelect from "../components/shared/SLSelect";

import { useEffect, useState } from "react";
import { useGetAllModelNamesQuery } from "../store/model/model.api";
import { useActions } from "../hooks/actions";
import SStatusIndicator from "../components/shared/SStatusIndicator";

export default function Viewer() {
  const [modelOptions, setModelOptions] = useState<
    Array<{ value: string; name: string; disable?: boolean }>
  >([]);
  const { data, isLoading, isError } = useGetAllModelNamesQuery();
  const actions = useActions();

  useEffect(() => {
    if (isLoading || isError) return;
    setModelOptions([
      { value: "default", name: "default", disable: true },
      ...(data?.data?.map((it) => ({ value: it.name, name: it.name })) || []),
    ]);
  }, [isLoading, isError, data?.data]);

  return (
    <div>
      <ModelViewer modelControlsEnable>
        {!isLoading && (
          <>
            <SStatusIndicator className="absolute right-2 top-1" />
            <SLSelect
              className="absolute bottom-0"
              name="modelName"
              onChange={async (e) => {
                actions.setModelName(e.target.value);
                actions.updateModelControlsAsync();
              }}
              text="Выберите модель"
              options={modelOptions}
            />
          </>
        )}
      </ModelViewer>
    </div>
  );
}


Содержимое файла Connect.css представлено следующим кодом:
.connect {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.add-connection {
  font-size: 20px;
  padding: 20px;
  margin: auto;
  margin-top: 30px;
  background-color: var(--secondary);
  border-radius: 30px;
  cursor: pointer;
}
.add-connection:hover {
  background-color: var(--secondary-hover);
}


Содержимое файла EditUser.tsx представлено следующим кодом:
import SAForm from "../components/shared/SAForm";
import { useLocation, useNavigate } from "react-router";
import { useEffect, useState } from "react";
import user from "../store/types/user";
import { useAppSelector } from "../hooks/redux";
import { useUpdateMutation } from "../store/user/user.api";

interface EditUserProps {
  onClose?: () => void;
  user?: user;
}

export default function EditUser(props: EditUserProps) {
  const navigator = useNavigate();
  const location = useLocation();

  const User = useAppSelector((state) => state.user);
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [editUserFun, editUser] = useUpdateMutation();

  const create = () => {
    const data: Record<string, string | number> = formData;
    data.id = props.user?.id || 0;
    editUserFun(data);
  };

  useEffect(() => {
    if (!User.id) {
      navigator(`/login?redirectTo=${location.pathname}`);
    }
  });
  useEffect(() => {
    if (editUser.data?.status === "ok") {
      const data: Record<string, string | number> = formData;
      setTimeout(() => {
        if (props?.onClose) props.onClose();
        navigator(`/profile/${data.login || ""}`);
        window.location.reload();
      }, 200);
    }
  }, [editUser, formData, navigator, props]);

  return (
    <SAForm
      onSubmit={create}
      setFormData={setFormData}
      button={`Edit user`}
      inputs={[
        {
          text: "Login",
          type: "text",
          name: "login",
          value: props.user?.login || "",
        },
        {
          text: "About self",
          type: "text",
          name: "info",
          value: props.user?.info || "",
        },
      ]}
    >
      {editUser.data?.status === "error" && (
        <div className="bg-amber-2 color-zinc-8 p-1 border-rounded">
          {editUser.data?.text}
        </div>
      )}
    </SAForm>
  );
}


Содержимое файла Home.tsx представлено следующим кодом:

import Post from '../../components/Post';
import { useGetPostsSBDQuery } from '../store/post/post.api';

export default function Home() {
  const {data: posts, refetch}= useGetPostsSBDQuery()
  return (
    <div className='mt-5 flex flex-col gap-5'>
      {posts && posts.map((it) => <Post {...it} key={it.id} refetch={refetch}/>)}
    </div>
  );
}


Содержимое файла Login.tsx представлено следующим кодом:
import { useEffect, useState } from "react";
import { useAuthentificateMutation } from "../store/user/user.api";
import { useActions } from "../hooks/actions";
import { useAppSelector } from "../hooks/redux";
import SAForm from "../components/shared/SAForm";
import SButton from "../components/shared/SButton";
import { useLocation, useNavigate } from "react-router";
import { Link } from "react-router-dom";

export default function Login() {
  const { setUser, logout } = useActions();
  const navigator = useNavigate();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const redirect = queryParams.get("redirectTo");
  const User = useAppSelector((state) => state.user);
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [loginFun, data] = useAuthentificateMutation();

  const login = () => {
    loginFun(formData);
  };

  useEffect(() => {
    if (data.data?.user) {
      setUser(data.data.user);
      if (data.data.status == "ok") navigator(redirect || "");
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [data]);

  return (
    <>
      {User.id === 0 && (
        <div>
          <SAForm
            onSubmit={login}
            setFormData={setFormData}
            button="Login"
            inputs={[
              { text: "Login", type: "text", name: "login" },
              { text: "Password", type: "password", name: "password" },
            ]}
          >
            {data.data?.status === "error" && (
              <div className="bg-amber-2 color-zinc-8 p-1 border-rounded">
                {data.data?.text}
              </div>
            )}
          </SAForm>
          <p className="text-center">
            Don't have an account?{" "}
            <Link
              className="color-amber-4  decoration-none"
              to="/register"
            >
              Register
            </Link>
          </p>
        </div>
      )}
      {User.id !== 0 && (
        <div className="w-full flex flex-col items-center justify-center">
          <h2 className="text-center mt-8">
            You are already logged in as{" "}
            <span className="color-amber-4">{User.login}</span>
          </h2>
          <SButton
            onClick={(e) => {
              e.preventDefault();
              logout();
            }}
          >
            Log out
          </SButton>
        </div>
      )}
    </>
  );
}


Содержимое файла Profile.tsx представлено следующим кодом:
import { Link, useParams } from "react-router-dom";
import {
  useBanUserMutation,
  useSearchByLoginQuery,
  useUnBanUserMutation,
} from "../../store/user/user.api";
import Er404 from "../../components/404";
import { useGroupsByUserQuery } from "../store/ugr/ugr.api";
import group from "../store/types/group";
import { useEffect, useState } from "react";
import SButton from "../../components/shared/SButton";
import { useGetPostsByUserQuery } from "../store/post/post.api";
import Post from "../../components/Post";
import PopUp from "../../components/PopUp";
import CreatePost from "./CreatePost";
import CreateGroup from "./CreateGroup";
import { useHasAccessRestricted, useHasAdminAccess } from "../../hooks/access";
import EditUser from "./EditUser";
import { useGetAnswersByUserIdQuery } from "../store/answer/answer.api";
import Answer from "../../components/Answer";

export default function Profile() {
  const { username } = useParams();
  const user = useSearchByLoginQuery(username!);
  const groupsIDs = useGroupsByUserQuery(user.data?.id || 0);
  const { data: posts, refetch: postsRefetch } = useGetPostsByUserQuery(
    user.data?.id || 0
  );
  const canAccess = useHasAccessRestricted(user.data?.id || NaN);
  const isAdmin = useHasAdminAccess();
  const [groups, setGroups] = useState<group[]>([]);
  const [writePost, setWritePost] = useState(false);
  const [createGroup, setCreateGroup] = useState(false);
  const [editUser, setEditUser] = useState(false);
  const [banUser] = useBanUserMutation();
  const [unBanUser] = useUnBanUserMutation();
  const { data: answers } = useGetAnswersByUserIdQuery(user.data?.id || 0);
  const Ban = function () {
    if (user.data)
      user.data.role == "BANNED" ? unBanUser(user.data) : banUser(user.data);
    window.location.reload();
  };
  useEffect(() => {
    const fetchGroups = async () => {
      try {
        if (groupsIDs.data) {
          const groupPromises = groupsIDs.data.map(async (it) => {
            const response = await fetch(`../api/group/id/${it.group_id}`);
            const data: group = await response.json();
            return data;
          });

          const groupsData = await Promise.all(groupPromises);
          setGroups(groupsData);
        }
      } catch (error) {
        console.error("Error fetching groups:", error);
      }
    };

    fetchGroups();
  }, [groupsIDs.data]);

  return (
    <div>
      {user.data && user.data.created_at && (
        <div>
          <div className="m-4 bg-emerald-8 flex justify-between items-center">
            <div>
              {" "}
              <h1 className="color-amber-4 mx-5 ">{user.data.login}</h1>
              <p className="mx-5 mb-2">
                Registered:{" "}
                {new Date(user.data.created_at).toLocaleDateString()}
              </p>
              <p className="mx-5 text-xl">{user.data.info}</p>
            </div>
            {isAdmin && user.data.role != "ADMIN" && (
              <SButton className="mr-2" onClick={Ban}>
                {user.data.role == "BANNED" ? "Unban user" : "Ban user"}
              </SButton>
            )}
            {canAccess && (
              <div className="mr-2">
                <SButton
                  onClick={() => {
                    setEditUser(true);
                  }}
                >
                  Edit
                </SButton>
                <SButton
                  onClick={() => {
                    setWritePost(true);
                  }}
                >
                  Write Post
                </SButton>
                <SButton
                  onClick={() => {
                    setCreateGroup(true);
                  }}
                >
                  Create Group
                </SButton>
                <PopUp
                  toggle={setWritePost}
                  isOpen={writePost}
                  refetch={postsRefetch}
                >
                  <CreatePost />
                </PopUp>
                <PopUp
                  toggle={setCreateGroup}
                  isOpen={createGroup}
                  refetch={groupsIDs.refetch}
                >
                  <CreateGroup />
                </PopUp>
                <PopUp
                  toggle={setEditUser}
                  isOpen={editUser}
                  refetch={user.refetch}
                >
                  <EditUser user={user.data} />
                </PopUp>
              </div>
            )}
          </div>
          <div className="m-4  bg-emerald-8">
            <h2 className="color-amber-4 mx-5">Groups</h2>
            <ul className="list-none max-h-[150px] overflow-y-auto scrollable-container custom-scrollbar">
              {groups &&
                groups.map((it) => {
                  return (
                    <li className="mt-1 px-4 bg-emerald-9" key={it.id}>
                      <Link
                        to={`../../group/${it.name}`}
                        className="flex justify-between color-zinc-2 decoration-none"
                      >
                        <div>
                          <h3>{it.name}</h3>
                          <p>
                            {it.description.slice(
                              0,
                              Math.min(50, it.description.length)
                            )}
                          </p>
                          <p>
                            Joined:{" "}
                            {new Date(
                              groupsIDs.data?.find(
                                (iit) => iit.group_id === it.id
                              )?.created_at || ""
                            ).toLocaleDateString() || ""}
                          </p>
                        </div>
                      </Link>
                    </li>
                  );
                })}
            </ul>
          </div>
          <div className="mt-5 flex flex-col gap-5 max-h-[400px] overflow-y-auto scrollable-container custom-scrollbar">
            {posts && posts.map((it) => <Post {...it} key={it.id} />)}
          </div>
        </div>
      )}
      {answers && (
        <div className="mt-10 flex flex-col gap-4 max-h-[200px] overflow-y-auto scrollable-container custom-scrollbar">
          {answers.map((answer) => (
            <Answer
              key={answer.id}
              {...answer}
              refetch={() => {}}
              isOnly={true}
            />
          ))}
        </div>
      )}
      {user.data?.status === "error" && <Er404 />}
    </div>
  );
}


Содержимое файла Register.tsx представлено следующим кодом:
import { useEffect, useState } from "react";
import { useRegisterMutation } from "../store/user/user.api";
import SAForm from "../components/shared/SAForm";

export default function Register() {
  const [formData, setFormData] = useState<Record<string, string>>({
    login: "",
    password: "",
    password1: "",
    info: "",
    role: "USER",
  });
  const setFormDataCustom = (data: Record<string, string>) => {
    data.role = "USER";
    setFormData(data);
  };
  const [info, setInfo] = useState({ status: "", text: "" });

  useEffect(() => {
    let status = "ok";
    let text = "";
    if (formData.password != formData.password1) {
      status = "error";
      text = "Passwords mismatch";
    }
    if (formData.password.length < 4) {
      status = "error";
      text = "Password must contain more than 4 characters";
    }
    if (formData.login.length < 3) {
      status = "error";
      text = "Login must contain more than 3 characters";
    }
    setInfo({ status, text });
  }, [formData]);

  const [registerFun, data] = useRegisterMutation();

  const register = () => {
    if (info.status !== "error") registerFun(formData);
  };

  return (
    <SAForm
      onSubmit={register}
      setFormData={setFormDataCustom}
      button="Register"
      inputs={[
        { text: "Login", type: "text", name: "login" },
        { text: "About Self", type: "text", name: "info" },
        { text: "Password", type: "password", name: "password" },
        { text: "Password", type: "password", name: "password1" },
      ]}
    >
      {info?.status === "error" && (
        <div className="bg-sky-3 color-zinc-8 p-1 border-rounded">
          {info.text}
        </div>
      )}
      {data.data?.status === "error" && (
        <div className="bg-amber-2 color-zinc-8 p-1 border-rounded">
          {data.data?.text}
        </div>
      )}
      {data.data?.status === "ok" && info?.status !== "error" && (
        <div className="bg-emerald color-zinc-8 p-1 border-rounded">
          {data.data?.text}
        </div>
      )}
    </SAForm>
  );
}


Содержимое файла index.ts представлено следующим кодом:
import { connectReducer } from "./connect/connect.slice";
import { Action, ThunkDispatch, configureStore } from "@reduxjs/toolkit";
import { modelApi } from "./model/model.api";
import { modelReducer } from "./model/model.slice";
import { useDispatch } from "react-redux";
import { connectApi } from "./connect/connect.api";

export const store = configureStore({
  reducer: {
    [modelApi.reducerPath]: modelApi.reducer,
    model: modelReducer,
    [connectApi.reducerPath]: connectApi.reducer,
    connect: connectReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        // Ignore these action types
        ignoredActions: ["model/updateModelDataAsync/fulfilled"],
      },
    })
      .concat(modelApi.middleware)
      .concat(connectApi.middleware),
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
export const useAppDispatch = useDispatch.withTypes<AppDispatch>();
export type ThunkAppDispatch = ThunkDispatch<RootState, void, Action>;
export const useAppThunkDispatch = () => useDispatch<ThunkAppDispatch>();


Содержимое файла connect.api.ts представлено следующим кодом:
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { ServerDataResponse, ServerResponse } from "../types/server"; // Предположим, что у вас есть тип ServerResponse

export const connectApi = createApi({
  reducerPath: "connect/api",
  baseQuery: fetchBaseQuery({
    baseUrl: "/api/connect", // Базовый URL для всех запросов
  }),
  endpoints: (build) => ({
    addConnect: build.mutation<
      ServerResponse,
      { ip: string; port: number; user?: string; password?: string }
    >({
      query: (connect) => {
        return {
          url: "/",
          method: "POST",
          body: connect,
        };
      },
    }),
  }),
});

export const { useAddConnectMutation } = connectApi;


Содержимое файла connect.slice.ts представлено следующим кодом:
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

interface ConnectState {
  ip: string | null;
  port: number | null;
  user: string | null;
  password: string | null;
}

const initialState: ConnectState = {
  ip: null,
  port: null,
  user: null,
  password: null,
};

export const connectSlice = createSlice({
  name: "connect",
  initialState,
  reducers: {
    setConnect: (state, action: PayloadAction<ConnectState>) => {
      state.ip = action.payload.ip;
      state.port = action.payload.port;
      state.user = action.payload.user;
      state.password = action.payload.password;
    },
    resetConnectState: (state) => {
      state.ip = null;
      state.password = null;
      state.user = null;
      state.port = null;
    },
  },
  extraReducers: (builder) => {
    builder;
  },
});

export const connectActions = {
  ...connectSlice.actions,
};
export const connectReducer = connectSlice.reducer;


Содержимое файла model.api.ts представлено следующим кодом:
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { ServerDataResponse, ServerResponse } from "../types/server"; // Предположим, что у вас есть тип ServerResponse

export const modelApi = createApi({
  reducerPath: "model/api",
  baseQuery: fetchBaseQuery({
    baseUrl: "/api/models", // Базовый URL для всех запросов
  }),
  endpoints: (build) => ({
    getAllModelNames: build.query<
      ServerDataResponse<{ id: number; name: string }[]>,
      void
    >({
      query: () => ({
        url: "/",
      }),
    }),

    // getModelByName: build.query<ArrayBuffer, string>({
    //   query: (modelName: string) => ({
    //     url: `/${modelName}`,
    //     responseHandler: async (response) => {
    //       const buffer = await response.arrayBuffer();
    //       return buffer;
    //     },
    //   }),
    // }),
    // getModelByName: build.query<ServerResponse, string>({
    //   query: (modelName) => ({
    //     url: `/${modelName}`,
    //   }),
    // }),

    addModel: build.mutation<
      ServerResponse,
      { name: string; data: ArrayBuffer }
    >({
      query: (model) => {
        const formData = new FormData();
        formData.append("name", model.name);
        formData.append(
          "data",
          new Blob([model.data], { type: "application/octet-stream" })
        );

        return {
          url: "/",
          method: "POST",
          body: formData,
        };
      },
    }),

    updateModelByName: build.mutation<
      ServerResponse,
      { modelName: string; data: ArrayBuffer }
    >({
      query: ({ modelName, data }) => ({
        url: `/${modelName}`,
        method: "PUT",
        body: { data },
      }),
    }),

    deleteModelByName: build.mutation<ServerResponse, string>({
      query: (modelName) => ({
        url: `/${modelName}`,
        method: "DELETE",
      }),
    }),
  }),
});

export const {
  useGetAllModelNamesQuery,
  //   useGetModelByNameQuery,
  useAddModelMutation,
  useUpdateModelByNameMutation,
  useDeleteModelByNameMutation,
} = modelApi;


Содержимое файла model.slice.ts представлено следующим кодом:
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ModelControls, ModelPositions } from "../../types/models";

interface ModelState {
  id: number;
  name: string;
  modelControls: ModelControls;
  positions: ModelPositions;
  isEnabled: boolean;
  isControlsEnabled: boolean;
  isEmergencyStoped: boolean;
  isLoadingControls: boolean;
  isErrorControls: boolean;
  isLoadingData: boolean;
  isErrorData: boolean;
  errorMessage: string | null;
}

const initialState: ModelState = {
  id: 0,
  name: "default",
  modelControls: { models: {}, controlElements: [] },
  positions: {},
  isEnabled: true,
  isControlsEnabled: true,
  isEmergencyStoped: false,
  isLoadingControls: false,
  isErrorControls: false,
  isLoadingData: false,
  isErrorData: false,
  errorMessage: null,
};

export const updateModelDataAsync = createAsyncThunk<ArrayBuffer, void>(
  "model/updateModelDataAsync",
  async (_, { getState, signal }) => {
    const state = getState() as { model: ModelState };
    const modelName = state.model.name;

    if (!modelName || modelName === "default") {
      throw new Error("Choose a model");
    }

    try {
      const response = await fetch(
        `http://localhost:8046/api/models/${modelName}`,
        { signal }
      );
      if (!response.ok) {
        throw new Error(`Failed to fetch model data: ${response.statusText}`);
      }
      return await response.arrayBuffer();
    } catch (error) {
      throw new Error(`Error fetching model data: ${(error as Error).message}`);
    }
  }
);

export const updateModelControlsAsync = createAsyncThunk(
  "model/updateModelControlsAsync",
  async (_, { getState, signal }) => {
    const state = getState() as { model: ModelState };
    const modelName = state.model.name;

    if (!modelName || modelName === "default") {
      throw new Error("Choose a model");
    }

    try {
      const response = await fetch(
        `http://localhost:8046/api/json/${modelName}`,
        { signal }
      );
      if (!response.ok) {
        throw new Error(
          `Failed to fetch model controls: ${response.statusText}`
        );
      }
      const updatedModelData = await response.json(); // Используем response.json() вместо arrayBuffer
      return updatedModelData;
    } catch (error) {
      throw new Error(
        `Error fetching model controls: ${(error as Error).message}`
      );
    }
  }
);

export const modelSlice = createSlice({
  name: "model",
  initialState,
  reducers: {
    setModelName: (state, action: PayloadAction<string>) => {
      state.name = action.payload;
      state.modelControls = { models: {}, controlElements: [] };
      state.positions = {};
      state.isControlsEnabled = true;
      state.isEnabled = true;
      state.isEmergencyStoped = false;
      state.isLoadingControls = false;
      state.isErrorControls = false;
      state.errorMessage = null;
    },
    switchEanbled: (state) => {
      state.isEnabled = !state.isEnabled;
      if (state.isEnabled) {
        state.isControlsEnabled = true;
        state.isEmergencyStoped = false;
      }
    },
    setControlsEnabled: (state, action: PayloadAction<boolean>) => {
      state.isControlsEnabled = action.payload;
    },
    setEmergency: (state) => {
      state.isEmergencyStoped = true;
    },
    resetModelState: (state) => {
      state.modelControls = { models: {}, controlElements: [] };
      state.positions = {};
      state.isControlsEnabled = true;
      state.isEnabled = true;
      state.isEmergencyStoped = false;
      state.isLoadingControls = false;
      state.isErrorControls = false;
      state.errorMessage = null;
      state.name = "default";
    },
    updatePositionsLocal: (state, action: PayloadAction<ModelPositions>) => {
      state.positions = action.payload;
    },
    updateModelPositionLocal: (
      state,
      action: PayloadAction<{
        command: "set" | "add";
        path: string;
        value: number;
      }>
    ) => {
      const { command, path, value } = action.payload;
      const path_spl = path.split("/");
      if (path_spl.length === 0) return;

      let current: any = state.positions;
      let currentControls: any = state.modelControls.models;
      for (let i = 0; i < path_spl.length - 1; i++) {
        const key = path_spl[i];
        if (!current[key]) {
          current[key] = {};
        }
        if (!currentControls[key]) {
          currentControls[key] = {};
        }
        current = current[key];
        currentControls = currentControls[key];
      }

      // Имя конечного свойства
      const lastKey = path_spl[path_spl.length - 1];
      if (!currentControls[lastKey] || currentControls[lastKey].length !== 2)
        currentControls[lastKey] = [-10, 10];
      const [min, max] = currentControls[lastKey] as [number, number];

      // Обновляем значение в зависимости от команды
      if (command === "set") {
        current[lastKey] = Math.max(Math.min(value, max), min);
      } else if (command === "add") {
        current[lastKey] = Math.max(
          Math.min((current[lastKey] || 0) + value, max),
          min
        );
      }
    },
  },
  extraReducers: (builder) => {
    builder
      // Обработка updateModelDataAsync (modelData)
      .addCase(updateModelDataAsync.pending, (state) => {
        state.isLoadingData = true;
        state.isErrorData = false;
        state.errorMessage = null;
      })
      .addCase(updateModelDataAsync.fulfilled, (state) => {
        state.isLoadingData = false;
        // Не сохраняем modelData в состоянии
      })
      .addCase(updateModelDataAsync.rejected, (state, action) => {
        state.isLoadingData = false;
        state.isErrorData = true;
        state.errorMessage =
          action.error.message || "Failed to fetch model data";
      })
      .addCase(updateModelControlsAsync.pending, (state) => {
        state.isLoadingControls = true;
        state.isErrorControls = false;
        state.errorMessage = null;
      })
      .addCase(updateModelControlsAsync.fulfilled, (state, action) => {
        state.isLoadingControls = false;
        state.modelControls = action.payload;
      })
      .addCase(updateModelControlsAsync.rejected, (state, action) => {
        state.isLoadingControls = false;
        state.isErrorControls = true;
        state.errorMessage =
          action.error.message || "Failed to fetch model controls";
      });
  },
});

export const modelActions = {
  ...modelSlice.actions,
  updateModelControlsAsync,
  updateModelDataAsync,
};
export const modelReducer = modelSlice.reducer;


Содержимое файла model.ts представлено следующим кодом:
export default interface model {
  id: number;
  name: string;
}


Содержимое файла server.ts представлено следующим кодом:
export interface ServerResponse {
  status: string;
  message: string;
}

export interface ServerDataResponse<T> {
  status: string;
  message: string;
  data?: T;
}


Содержимое файла helpers.ts представлено следующим кодом:
type Paths<T> = T extends object
  ? {
      [K in keyof T]: `${Exclude<K, symbol>}${"" | `.${Paths<T[K]>}`}`;
    }[keyof T]
  : never;

type Leaves<T> = T extends object
  ? {
      [K in keyof T]: `${Exclude<K, symbol>}${Leaves<T[K]> extends never
        ? ""
        : `.${Leaves<T[K]>}`}`;
    }[keyof T]
  : never;


Содержимое файла models.ts представлено следующим кодом:
export interface xyz {
  x?: number;
  y?: number;
  z?: number;
}

export interface xyzController {
  x?: [number, number];
  y?: [number, number];
  z?: [number, number];
}

export interface ModelPositions {
  [key: string]: {
    position?: xyz;
    rotation?: xyz;
  };
}
export type modelValuePath = ["position" | "rotation", keyof xyz];
export type interfacePositions =
  | "TopLeft"
  | "Top"
  | "TopRight"
  | "Left"
  | "Center"
  | "Right"
  | "BottomLeft"
  | "Bottom"
  | "BottomRight"
  | undefined;
export interface JoystickControlElement {
  name: string;
  element: "Joystick";
  position: interfacePositions;
  props: {
    xpath: string;
    ypath: string;
  };
}
export interface SetButtonControlElement {
  name: string;
  element: "setButton";
  position: interfacePositions;
  props: {
    values: [
      {
        path: string;
        value: number;
      }
    ];
  };
}
export interface SArrowButtonsElement {
  name: string;
  element: "ArrowButtons";
  position: interfacePositions;
  props: {
    type: "up/down" | "left/right";
    path: string;
  };
}

export interface SPowerButtonElement {
  name: string;
  element: "PowerButton";
  position: interfacePositions;
  props: {
    defaultValues: [
      {
        path: string;
        value: number;
      }
    ];
  };
}

export interface SEmergencyStopElement {
  name: string;
  element: "EmergencyStop";
  position: interfacePositions;
}

export type controlElement =
  | JoystickControlElement
  | SetButtonControlElement
  | SArrowButtonsElement
  | SPowerButtonElement
  | SEmergencyStopElement;

export interface ModelControls {
  models: {
    [key: string]: { position?: xyzController; rotation?: xyzController };
  };
  controlElements: Array<controlElement>;
}


