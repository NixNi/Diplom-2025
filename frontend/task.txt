Напиши код для дополнения текущего компонета, он должен читать json вида 
{
    models: [
        {
            name: ModelName1
            position: {
                x: true
                y: false
                z: true
                x_limit: [0, 50]
                y_limit: null
                z_limit: [-20, 20]
            }
            rotation {
                x: false
                y: true
                z: true
                x_limit: null
                y_limit: [0, 20]
                z_limit: [-20, 20]
            }
        },
        {
            name: ModelName2
            position: {
                x: true
                y: false
                z: true
                x_limit: [0, 50]
                y_limit: null
                z_limit: [-20, 20]
            }
            rotation {
                x: false
                y: true
                z: true
                x_limit: null
                y_limit: [0, 20]
                z_limit: [-20, 20]
            }
        },
    ]
}

и создает поля для управление модели с кодом по типу, поработай над стилистикой
 useEffect(() => {
    if (modelLoaded && modelRef.current) {
      const modelPart = modelRef.current.getObjectByName("ModelName1");
      if (modelPart) {
        modelPart.position.x = position;
      }
    }
  }, [position, modelLoaded]);


<div>
<div>
<h2>ModelName1<h2>
    <label>X позиция</label> 
        <input
          type="number"
          value={position}
          onChange={(e) => setPosition()}
        />
        <label>Z позиция</label> 
        <input
          type="number"
          value={position}
          onChange={(e) => setPosition()}
        />
        <label>Y поворот</label> 
        <input
          type="number"
          value={position}
          onChange={(e) => setPosition()}
        />
        <label>Z поворот</label> 
        <input
          type="number"
          value={position}
          onChange={(e) => setPosition()}
        />
        </div>

        <div>
<h2>ModelName2<h2>
 ....
        </div>
      </div>

import { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { GLTFLoader, TrackballControls } from "three/examples/jsm/Addons.js";
import setupLCC from "./additions/setupLCC";
import useModelData from "../hooks/models";

interface ModelViewer {
  modelName: string;
  size?: {
    x: number;
    y: number;
  };
}

const ModelViewer = ({ modelName, size }: ModelViewer) => {
  const mountRef = useRef<HTMLDivElement>(null);
  const sceneRef = useRef(new THREE.Scene());
  const modelRef = useRef<THREE.Object3D | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  //TODO: ref for renderer and controls

  const {
    modelData,
    isLoading,
    isError,
    errorMessage: loaderError,
  } = useModelData(modelName);

  useEffect(() => {
    if (mountRef.current === null || isLoading || isError || !modelData) return;
    const mount = mountRef.current;
    const scene = sceneRef.current;
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    mount.replaceChildren(renderer.domElement);
    if (size) renderer.setSize(size.x, size.y);
    else renderer.setSize(600, 600);

    const camera = new THREE.PerspectiveCamera(
      75,
      (size?.x || 600) / (size?.y || 600),
      0.1,
      1000
    );
    const controls = new TrackballControls(camera, renderer.domElement);
    setupLCC(scene, renderer, camera, controls);

    const loader = new GLTFLoader();

    // Удаляем предыдущую модель, если она существует
    if (modelRef.current) {
      scene.remove(modelRef.current);
      modelRef.current = null;
    }

    // Парсим ArrayBuffer как GLB файл
    if (!isLoading || !isError)
      loader.parse(
        modelData,
        "",
        (gltf) => {
          modelRef.current = gltf.scene;
          scene.add(gltf.scene);
        },
        (error) => {
          // console.error("Error parsing model:", error);
          setErrorMessage("Error parsing model: " + error.message);
        }
      );

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      // Очищаем сцену и рендерер
      scene.clear();
      renderer.dispose();
      controls.dispose();
      if (mount) {
        mount.removeChild(renderer.domElement);
      }
    };
  }, [modelData, isLoading, isError, size]);

  return (
    <div className="relative">
      <div ref={mountRef} />
      {(errorMessage || loaderError) && (
        <div
          style={{ width: size?.x || 600, height: size?.y || 600 }}
          className="flex filler"
        >
          <div className="secondary m-auto p-10 font-bold text-5">
            {loaderError || errorMessage}
          </div>
        </div>
      )}
    </div>
  );
};
export default ModelViewer;


Напиши обновленный код целиком
а после отрывки нового кода с пояснениями
